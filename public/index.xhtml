<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>Lively Outliners</title>
</head>

<body id="body">

<h1>Lively Outliners</h1>

<p>This is an attempt to bring a little bit of the goodness of the <a href="http://selflanguage.org">Self</a> programming environment to JavaScript, using Sun Labs' <a href="http://www.lively-kernel.org/">Lively Kernel</a> as a base.</p>

<p>Compared to Self, this thing is kind of a hack - current JavaScript implementations are pretty limited. But it runs in a web browser.</p>


<h2>How do I try it?</h2>

<p>You can <a href="http://adamspitz.com/Lively-Outliners/example.xhtml">play with it here</a>, or <a href="http://github.com/AdamSpitz/Lively-Outliners">get the source code from GitHub</a>.</p>


<h2>Philosophy</h2>

<h3>Live objects, not dead text</h3>

<p>I hate writing code in text files. I hate seeing a misbehaving object on my screen and having to leave my browser and go to the text files and type things there and refresh the browser. When I see a misbehaving object, I want to walk right up to the object and start poking it and prodding it to see what's wrong with it.</p>

<p>Lively Kernel, like Smalltalk before it, is a live world. You build your program out of objects, while the system is running. (Of course you can later file out your code into ordinary .js files, for inclusion in your web pages. If you're curious about how we do that, see the <a href="http://research.sun.com/self/papers/transporter.html">Self transporter paper</a>.)</p>


<h3>Object-focused programming environment</h3>

<p>Most programming environments give you a plethora of tools for viewing and manipulating the objects in your system. Class browsers, object hierarchy browsers, object inspectors, that sort of thing. These tools can be really powerful, but when I use them I feel like my objects are hiding somewhere deep in the bowels of my computer and the tool is just presenting me with little knobs and dials that are somehow connected to the objects.</p>

<p>Lively Outliners, like Self, tries instead to give you the feeling of <a href="http://selflanguage.org/documentation/published/object-focus.html">getting your hands directly on your objects</a>. If you want to do something to an object - add a slot to it, call one of its methods - you go right up to it and do it. If you ask the object how it fits into the inheritance hierarchy, you don't suddenly get shown a new Inheritance Hierarchy Browser tool; rather, the objects themselves zoom around on the screen to arrange themselves into a tree shape.</p>


<h2>How stable is it?</h2>

<p>Not very. I don't really trust this thing with my code yet. (I'm using it to manage most of its own code, but I double-check the filed-out .js files to make sure they look OK.) But it's getting more and more solid every day.</p>

<p>I've mostly been testing with Safari, but I think it should run on Firefox and Chrome too. Not sure about Opera. Definitely not IE (though it could be used to produce JavaScript code that runs on IE, as long as you're careful to avoid the features that IE doesn't support).</p>


<h2>How does this compare to Self?</h2>

<ul>

<li><b>The language is JavaScript.</b> JavaScript has a core of pretty good stuff - dynamic typing, a prototype-based object system, more-or-less proper closures - surrounded by a huge pile of really bad stuff. If someone were to dress up JavaScript with a better syntax that hides the bad stuff and makes the good stuff easier, it could actually be a pretty decent Self-like language. (Sooner or later I'll get around to doing this myself.)</li>

<li><b>Gotta use the browser's debugger.</b> The Safari and FireFox JavaScript debuggers are better than nothing, but still not up to the standards of Self or Smalltalk. If I understand correctly, it's just not possible (in current browsers) to write a JavaScript debugger in JavaScript - the introspection facilities just aren't there. (Someone please correct me if I'm wrong about this!)</li>

<li><b>No snapshotting.</b> Because JavaScript can't reflect on a function's local variables, I don't think there's a way to save a snapshot of a running system. We may be able to hack together something that'll sorta work OK most of the time.</li>

<li><b>It runs in a web browser.</b> Honestly, if you want to know what object-oriented, prototype-based programming <i>should</i> be like, go try out <a href="http://selflanguage.org">Self</a>. It's awesome. But if you want something that runs in a web browser... well, this thing does and Self doesn't.</li>

</ul>


</body>

</html>
